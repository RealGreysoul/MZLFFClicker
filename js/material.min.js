!(function () {
  "use strict";
  function e(e, t) {
    var s, i;
    e &&
      (t.element_.classList.contains(t.CssClasses_.MDL_JS_RIPPLE_EFFECT) &&
        ((s = document.createElement("span")).classList.add(
          t.CssClasses_.MDL_RIPPLE_CONTAINER
        ),
        s.classList.add(t.CssClasses_.MDL_JS_RIPPLE_EFFECT),
        (i = document.createElement("span")).classList.add(
          t.CssClasses_.MDL_RIPPLE
        ),
        s.appendChild(i),
        e.appendChild(s)),
      e.addEventListener("click", function (s) {
        "#" === e.getAttribute("href").charAt(0) &&
          (s.preventDefault(),
          (s = e.href.split("#")[1]),
          (s = t.element_.querySelector("#" + s)),
          t.resetTabState_(),
          t.resetPanelState_(),
          e.classList.add(t.CssClasses_.ACTIVE_CLASS),
          s.classList.add(t.CssClasses_.ACTIVE_CLASS));
      }));
  }
  function p(e, t, i, n) {
    function a() {
      var s = e.href.split("#")[1],
        s = n.content_.querySelector("#" + s);
      n.resetTabState_(t),
        n.resetPanelState_(i),
        e.classList.add(n.CssClasses_.IS_ACTIVE),
        s.classList.add(n.CssClasses_.IS_ACTIVE);
    }
    var s, l;
    n.tabBar_.classList.contains(n.CssClasses_.JS_RIPPLE_EFFECT) &&
      ((s = document.createElement("span")).classList.add(
        n.CssClasses_.RIPPLE_CONTAINER
      ),
      s.classList.add(n.CssClasses_.JS_RIPPLE_EFFECT),
      (l = document.createElement("span")).classList.add(n.CssClasses_.RIPPLE),
      s.appendChild(l),
      e.appendChild(s)),
      n.tabBar_.classList.contains(n.CssClasses_.TAB_MANUAL_SWITCH) ||
        e.addEventListener("click", function (s) {
          "#" === e.getAttribute("href").charAt(0) && (s.preventDefault(), a());
        }),
      (e.show = a);
  }
  var c,
    C,
    u,
    n = {
      upgradeDom: function (s, e) {},
      upgradeElement: function (s, e) {},
      upgradeElements: function (s) {},
      upgradeAllRegistered: function () {},
      registerUpgradedCallback: function (s, e) {},
      register: function (s) {},
      downgradeElements: function (s) {},
    };
  function E(s, e) {
    for (var t = 0; t < c.length; t++)
      if (c[t].className === s) return void 0 !== e && (c[t] = e), c[t];
    return !1;
  }
  function m(s) {
    s = s.getAttribute("data-upgraded");
    return null === s ? [""] : s.split(",");
  }
  function L(s, e) {
    return -1 !== m(s).indexOf(e);
  }
  function I(s, e, t) {
    if ("CustomEvent" in window && "function" == typeof window.CustomEvent)
      return new CustomEvent(s, { bubbles: e, cancelable: t });
    var i = document.createEvent("Events");
    return i.initEvent(s, e, t), i;
  }
  function l(s, e) {
    if (void 0 === s && void 0 === e)
      for (var t = 0; t < c.length; t++) l(c[t].className, c[t].cssClass);
    else {
      var i = s;
      void 0 !== e || ((s = E(i)) && (e = s.cssClass));
      for (var n = document.querySelectorAll("." + e), a = 0; a < n.length; a++)
        o(n[a], i);
    }
  }
  function o(e, s) {
    if (!("object" == typeof e && e instanceof Element))
      throw new Error("Invalid argument provided to upgrade MDL element.");
    var t = I("mdl-componentupgrading", !0, !0);
    if ((e.dispatchEvent(t), !t.defaultPrevented)) {
      var i,
        n = m(e),
        a = [];
      s
        ? L(e, s) || a.push(E(s))
        : ((i = e.classList),
          c.forEach(function (s) {
            i.contains(s.cssClass) &&
              -1 === a.indexOf(s) &&
              !L(e, s.className) &&
              a.push(s);
          }));
      for (var l, o = 0, r = a.length; o < r; o++) {
        if (!(l = a[o]))
          throw new Error(
            "Unable to find a registered component for the given class."
          );
        n.push(l.className), e.setAttribute("data-upgraded", n.join(","));
        var _ = new l.classConstructor(e);
        (_[u] = l), C.push(_);
        for (var d = 0, h = l.callbacks.length; d < h; d++) l.callbacks[d](e);
        l.widget && (e[l.className] = _);
        _ = I("mdl-componentupgraded", !0, !1);
        e.dispatchEvent(_);
      }
    }
  }
  function i(s) {
    var e, t;
    s &&
      ((e = C.indexOf(s)),
      C.splice(e, 1),
      (e = (t = s.element_.getAttribute("data-upgraded").split(",")).indexOf(
        s[u].classAsString
      )),
      t.splice(e, 1),
      s.element_.setAttribute("data-upgraded", t.join(",")),
      (t = I("mdl-componentdowngraded", !0, !1)),
      s.element_.dispatchEvent(t));
  }
  (c = []),
    (C = []),
    (u = "mdlComponentConfigInternal_"),
    (n = {
      upgradeDom: l,
      upgradeElement: o,
      upgradeElements: function s(e) {
        Array.isArray(e) ||
          (e = e instanceof Element ? [e] : Array.prototype.slice.call(e));
        for (var t, i = 0, n = e.length; i < n; i++)
          (t = e[i]) instanceof HTMLElement &&
            (o(t), 0 < t.children.length && s(t.children));
      },
      upgradeAllRegistered: function () {
        for (var s = 0; s < c.length; s++) l(c[s].className);
      },
      registerUpgradedCallback: function (s, e) {
        (s = E(s)) && s.callbacks.push(e);
      },
      register: function (s) {
        var e = !0;
        (void 0 === s.widget && void 0 === s.widget) ||
          (e = s.widget || s.widget);
        var t = {
          classConstructor: s.constructor || s.constructor,
          className: s.classAsString || s.classAsString,
          cssClass: s.cssClass || s.cssClass,
          widget: e,
          callbacks: [],
        };
        if (
          (c.forEach(function (s) {
            if (s.cssClass === t.cssClass)
              throw new Error(
                "The provided cssClass has already been registered: " +
                  s.cssClass
              );
            if (s.className === t.className)
              throw new Error(
                "The provided className has already been registered"
              );
          }),
          s.constructor.prototype.hasOwnProperty(u))
        )
          throw new Error(
            "MDL component classes must not have " +
              u +
              " defined as a property."
          );
        E(s.classAsString, t) || c.push(t);
      },
      downgradeElements: function (s) {
        function e(e) {
          C.filter(function (s) {
            return s.element_ === e;
          }).forEach(i);
        }
        if (s instanceof Array || s instanceof NodeList)
          for (var t = 0; t < s.length; t++) e(s[t]);
        else {
          if (!(s instanceof Node))
            throw new Error(
              "Invalid argument provided to downgrade MDL nodes."
            );
          e(s);
        }
      },
    }),
    n.Component,
    (n.upgradeDom = n.upgradeDom),
    (n.upgradeElement = n.upgradeElement),
    (n.upgradeElements = n.upgradeElements),
    (n.upgradeAllRegistered = n.upgradeAllRegistered),
    (n.registerUpgradedCallback = n.registerUpgradedCallback),
    (n.register = n.register),
    (n.downgradeElements = n.downgradeElements),
    (window.componentHandler = n),
    (window.componentHandler = n),
    window.addEventListener("load", function () {
      "classList" in document.createElement("div") &&
      "querySelector" in document &&
      "addEventListener" in window &&
      Array.prototype.forEach
        ? (document.documentElement.classList.add("mdl-js"),
          n.upgradeAllRegistered())
        : ((n.upgradeElement = function () {}), (n.register = function () {}));
    }),
    Date.now ||
      ((Date.now = function () {
        return new Date().getTime();
      }),
      (Date.now = Date.now));
  for (
    var a, s = ["webkit", "moz"], t = 0;
    t < s.length && !window.requestAnimationFrame;
    ++t
  ) {
    var r = s[t];
    (window.requestAnimationFrame = window[r + "RequestAnimationFrame"]),
      (window.cancelAnimationFrame =
        window[r + "CancelAnimationFrame"] ||
        window[r + "CancelRequestAnimationFrame"]),
      (window.requestAnimationFrame = window.requestAnimationFrame),
      (window.cancelAnimationFrame = window.cancelAnimationFrame);
  }
  (!/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) &&
    window.requestAnimationFrame &&
    window.cancelAnimationFrame) ||
    ((a = 0),
    (window.requestAnimationFrame = function (s) {
      var e = Date.now(),
        t = Math.max(a + 16, e);
      return setTimeout(function () {
        s((a = t));
      }, t - e);
    }),
    (window.cancelAnimationFrame = clearTimeout),
    (window.requestAnimationFrame = window.requestAnimationFrame),
    (window.cancelAnimationFrame = window.cancelAnimationFrame));
  var _ = function (s) {
    (this.element_ = s), this.init();
  };
  function d(s) {
    (this.element_ = s), this.init();
  }
  ((window.MaterialButton = _).prototype.Constant_ = {}),
    (_.prototype.CssClasses_ = {
      RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_CONTAINER: "mdl-button__ripple-container",
      RIPPLE: "mdl-ripple",
    }),
    (_.prototype.blurHandler_ = function (s) {
      s && this.element_.blur();
    }),
    (_.prototype.disable = function () {
      this.element_.disabled = !0;
    }),
    (_.prototype.enable = function () {
      this.element_.disabled = !1;
    }),
    (_.prototype.init = function () {
      var s;
      this.element_ &&
        (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT) &&
          ((s = document.createElement("span")).classList.add(
            this.CssClasses_.RIPPLE_CONTAINER
          ),
          (this.rippleElement_ = document.createElement("span")),
          this.rippleElement_.classList.add(this.CssClasses_.RIPPLE),
          s.appendChild(this.rippleElement_),
          (this.boundRippleBlurHandler = this.blurHandler_.bind(this)),
          this.rippleElement_.addEventListener(
            "mouseup",
            this.boundRippleBlurHandler
          ),
          this.element_.appendChild(s)),
        (this.boundButtonBlurHandler = this.blurHandler_.bind(this)),
        this.element_.addEventListener("mouseup", this.boundButtonBlurHandler),
        this.element_.addEventListener(
          "mouseleave",
          this.boundButtonBlurHandler
        ));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialButton",
      cssClass: "mdl-js-button",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialCheckbox = _).prototype.Constant_ = {
      TINY_TIMEOUT: 0.001,
    }),
    (_.prototype.CssClasses_ = {
      INPUT: "mdl-checkbox__input",
      BOX_OUTLINE: "mdl-checkbox__box-outline",
      FOCUS_HELPER: "mdl-checkbox__focus-helper",
      TICK_OUTLINE: "mdl-checkbox__tick-outline",
      RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      RIPPLE_CONTAINER: "mdl-checkbox__ripple-container",
      RIPPLE_CENTER: "mdl-ripple--center",
      RIPPLE: "mdl-ripple",
      IS_FOCUSED: "is-focused",
      IS_DISABLED: "is-disabled",
      IS_CHECKED: "is-checked",
      IS_UPGRADED: "is-upgraded",
    }),
    (_.prototype.onChange_ = function (s) {
      this.updateClasses_();
    }),
    (_.prototype.onFocus_ = function (s) {
      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onBlur_ = function (s) {
      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onMouseUp_ = function (s) {
      this.blur_();
    }),
    (_.prototype.updateClasses_ = function () {
      this.checkDisabled(), this.checkToggleState();
    }),
    (_.prototype.blur_ = function () {
      window.setTimeout(
        function () {
          this.inputElement_.blur();
        }.bind(this),
        this.Constant_.TINY_TIMEOUT
      );
    }),
    (_.prototype.checkToggleState = function () {
      this.inputElement_.checked
        ? this.element_.classList.add(this.CssClasses_.IS_CHECKED)
        : this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
    }),
    (_.prototype.checkDisabled = function () {
      this.inputElement_.disabled
        ? this.element_.classList.add(this.CssClasses_.IS_DISABLED)
        : this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
    }),
    (_.prototype.disable = function () {
      (this.inputElement_.disabled = !0), this.updateClasses_();
    }),
    (_.prototype.enable = function () {
      (this.inputElement_.disabled = !1), this.updateClasses_();
    }),
    (_.prototype.check = function () {
      (this.inputElement_.checked = !0), this.updateClasses_();
    }),
    (_.prototype.uncheck = function () {
      (this.inputElement_.checked = !1), this.updateClasses_();
    }),
    (_.prototype.init = function () {
      var s, e, t;
      this.element_ &&
        ((this.inputElement_ = this.element_.querySelector(
          "." + this.CssClasses_.INPUT
        )),
        (t = document.createElement("span")).classList.add(
          this.CssClasses_.BOX_OUTLINE
        ),
        (s = document.createElement("span")).classList.add(
          this.CssClasses_.FOCUS_HELPER
        ),
        (e = document.createElement("span")).classList.add(
          this.CssClasses_.TICK_OUTLINE
        ),
        t.appendChild(e),
        this.element_.appendChild(s),
        this.element_.appendChild(t),
        this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT) &&
          (this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),
          (this.rippleContainerElement_ = document.createElement("span")),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_CONTAINER
          ),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_EFFECT
          ),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_CENTER
          ),
          (this.boundRippleMouseUp = this.onMouseUp_.bind(this)),
          this.rippleContainerElement_.addEventListener(
            "mouseup",
            this.boundRippleMouseUp
          ),
          (t = document.createElement("span")).classList.add(
            this.CssClasses_.RIPPLE
          ),
          this.rippleContainerElement_.appendChild(t),
          this.element_.appendChild(this.rippleContainerElement_)),
        (this.boundInputOnChange = this.onChange_.bind(this)),
        (this.boundInputOnFocus = this.onFocus_.bind(this)),
        (this.boundInputOnBlur = this.onBlur_.bind(this)),
        (this.boundElementMouseUp = this.onMouseUp_.bind(this)),
        this.inputElement_.addEventListener("change", this.boundInputOnChange),
        this.inputElement_.addEventListener("focus", this.boundInputOnFocus),
        this.inputElement_.addEventListener("blur", this.boundInputOnBlur),
        this.element_.addEventListener("mouseup", this.boundElementMouseUp),
        this.updateClasses_(),
        this.element_.classList.add(this.CssClasses_.IS_UPGRADED));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialCheckbox",
      cssClass: "mdl-js-checkbox",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialIconToggle = _).prototype.Constant_ = {
      TINY_TIMEOUT: 0.001,
    }),
    (_.prototype.CssClasses_ = {
      INPUT: "mdl-icon-toggle__input",
      JS_RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      RIPPLE_CONTAINER: "mdl-icon-toggle__ripple-container",
      RIPPLE_CENTER: "mdl-ripple--center",
      RIPPLE: "mdl-ripple",
      IS_FOCUSED: "is-focused",
      IS_DISABLED: "is-disabled",
      IS_CHECKED: "is-checked",
    }),
    (_.prototype.onChange_ = function (s) {
      this.updateClasses_();
    }),
    (_.prototype.onFocus_ = function (s) {
      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onBlur_ = function (s) {
      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onMouseUp_ = function (s) {
      this.blur_();
    }),
    (_.prototype.updateClasses_ = function () {
      this.checkDisabled(), this.checkToggleState();
    }),
    (_.prototype.blur_ = function () {
      window.setTimeout(
        function () {
          this.inputElement_.blur();
        }.bind(this),
        this.Constant_.TINY_TIMEOUT
      );
    }),
    (_.prototype.checkToggleState = function () {
      this.inputElement_.checked
        ? this.element_.classList.add(this.CssClasses_.IS_CHECKED)
        : this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
    }),
    (_.prototype.checkDisabled = function () {
      this.inputElement_.disabled
        ? this.element_.classList.add(this.CssClasses_.IS_DISABLED)
        : this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
    }),
    (_.prototype.disable = function () {
      (this.inputElement_.disabled = !0), this.updateClasses_();
    }),
    (_.prototype.enable = function () {
      (this.inputElement_.disabled = !1), this.updateClasses_();
    }),
    (_.prototype.check = function () {
      (this.inputElement_.checked = !0), this.updateClasses_();
    }),
    (_.prototype.uncheck = function () {
      (this.inputElement_.checked = !1), this.updateClasses_();
    }),
    (_.prototype.init = function () {
      var s;
      this.element_ &&
        ((this.inputElement_ = this.element_.querySelector(
          "." + this.CssClasses_.INPUT
        )),
        this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT) &&
          (this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),
          (this.rippleContainerElement_ = document.createElement("span")),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_CONTAINER
          ),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.JS_RIPPLE_EFFECT
          ),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_CENTER
          ),
          (this.boundRippleMouseUp = this.onMouseUp_.bind(this)),
          this.rippleContainerElement_.addEventListener(
            "mouseup",
            this.boundRippleMouseUp
          ),
          (s = document.createElement("span")).classList.add(
            this.CssClasses_.RIPPLE
          ),
          this.rippleContainerElement_.appendChild(s),
          this.element_.appendChild(this.rippleContainerElement_)),
        (this.boundInputOnChange = this.onChange_.bind(this)),
        (this.boundInputOnFocus = this.onFocus_.bind(this)),
        (this.boundInputOnBlur = this.onBlur_.bind(this)),
        (this.boundElementOnMouseUp = this.onMouseUp_.bind(this)),
        this.inputElement_.addEventListener("change", this.boundInputOnChange),
        this.inputElement_.addEventListener("focus", this.boundInputOnFocus),
        this.inputElement_.addEventListener("blur", this.boundInputOnBlur),
        this.element_.addEventListener("mouseup", this.boundElementOnMouseUp),
        this.updateClasses_(),
        this.element_.classList.add("is-upgraded"));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialIconToggle",
      cssClass: "mdl-js-icon-toggle",
      widget: !0,
    }),
    ((window.MaterialMenu = d).prototype.Constant_ = {
      TRANSITION_DURATION_SECONDS: 0.3,
      TRANSITION_DURATION_FRACTION: 0.8,
      CLOSE_TIMEOUT: 150,
    }),
    (d.prototype.Keycodes_ = {
      ENTER: 13,
      ESCAPE: 27,
      SPACE: 32,
      UP_ARROW: 38,
      DOWN_ARROW: 40,
    }),
    (d.prototype.CssClasses_ = {
      CONTAINER: "mdl-menu__container",
      OUTLINE: "mdl-menu__outline",
      ITEM: "mdl-menu__item",
      ITEM_RIPPLE_CONTAINER: "mdl-menu__item-ripple-container",
      RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      RIPPLE: "mdl-ripple",
      IS_UPGRADED: "is-upgraded",
      IS_VISIBLE: "is-visible",
      IS_ANIMATING: "is-animating",
      BOTTOM_LEFT: "mdl-menu--bottom-left",
      BOTTOM_RIGHT: "mdl-menu--bottom-right",
      TOP_LEFT: "mdl-menu--top-left",
      TOP_RIGHT: "mdl-menu--top-right",
      UNALIGNED: "mdl-menu--unaligned",
    }),
    (d.prototype.init = function () {
      if (this.element_) {
        var s = document.createElement("div");
        s.classList.add(this.CssClasses_.CONTAINER),
          this.element_.parentElement.insertBefore(s, this.element_),
          this.element_.parentElement.removeChild(this.element_),
          s.appendChild(this.element_),
          (this.container_ = s);
        var e = document.createElement("div");
        e.classList.add(this.CssClasses_.OUTLINE),
          (this.outline_ = e),
          s.insertBefore(e, this.element_);
        var t =
            this.element_.getAttribute("for") ||
            this.element_.getAttribute("data-mdl-for"),
          e = null;
        t &&
          (e = document.getElementById(t)) &&
          ((this.forElement_ = e).addEventListener(
            "click",
            this.handleForClick_.bind(this)
          ),
          e.addEventListener(
            "keydown",
            this.handleForKeyboardEvent_.bind(this)
          ));
        var i = this.element_.querySelectorAll("." + this.CssClasses_.ITEM);
        (this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this)),
          (this.boundItemClick_ = this.handleItemClick_.bind(this));
        for (var n = 0; n < i.length; n++)
          i[n].addEventListener("click", this.boundItemClick_),
            (i[n].tabIndex = "-1"),
            i[n].addEventListener("keydown", this.boundItemKeydown_);
        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT))
          for (
            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),
              n = 0;
            n < i.length;
            n++
          ) {
            var a = i[n],
              l = document.createElement("span");
            l.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);
            var o = document.createElement("span");
            o.classList.add(this.CssClasses_.RIPPLE),
              l.appendChild(o),
              a.appendChild(l),
              a.classList.add(this.CssClasses_.RIPPLE_EFFECT);
          }
        this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT) &&
          this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT),
          this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT) &&
            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT),
          this.element_.classList.contains(this.CssClasses_.TOP_LEFT) &&
            this.outline_.classList.add(this.CssClasses_.TOP_LEFT),
          this.element_.classList.contains(this.CssClasses_.TOP_RIGHT) &&
            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT),
          this.element_.classList.contains(this.CssClasses_.UNALIGNED) &&
            this.outline_.classList.add(this.CssClasses_.UNALIGNED),
          s.classList.add(this.CssClasses_.IS_UPGRADED);
      }
    }),
    (d.prototype.handleForClick_ = function (s) {
      var e, t;
      this.element_ &&
        this.forElement_ &&
        ((e = this.forElement_.getBoundingClientRect()),
        (t = this.forElement_.parentElement.getBoundingClientRect()),
        this.element_.classList.contains(this.CssClasses_.UNALIGNED) ||
          (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)
            ? ((this.container_.style.right = t.right - e.right + "px"),
              (this.container_.style.top =
                this.forElement_.offsetTop +
                this.forElement_.offsetHeight +
                "px"))
            : this.element_.classList.contains(this.CssClasses_.TOP_LEFT)
            ? ((this.container_.style.left =
                this.forElement_.offsetLeft + "px"),
              (this.container_.style.bottom = t.bottom - e.top + "px"))
            : this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)
            ? ((this.container_.style.right = t.right - e.right + "px"),
              (this.container_.style.bottom = t.bottom - e.top + "px"))
            : ((this.container_.style.left =
                this.forElement_.offsetLeft + "px"),
              (this.container_.style.top =
                this.forElement_.offsetTop +
                this.forElement_.offsetHeight +
                "px")))),
        this.toggle(s);
    }),
    (d.prototype.handleForKeyboardEvent_ = function (s) {
      var e;
      this.element_ &&
        this.container_ &&
        this.forElement_ &&
        (e = this.element_.querySelectorAll(
          "." + this.CssClasses_.ITEM + ":not([disabled])"
        )) &&
        0 < e.length &&
        this.container_.classList.contains(this.CssClasses_.IS_VISIBLE) &&
        (s.keyCode === this.Keycodes_.UP_ARROW
          ? (s.preventDefault(), e[e.length - 1].focus())
          : s.keyCode === this.Keycodes_.DOWN_ARROW &&
            (s.preventDefault(), e[0].focus()));
    }),
    (d.prototype.handleItemKeyboardEvent_ = function (s) {
      var e, t;
      this.element_ &&
        this.container_ &&
        (t = this.element_.querySelectorAll(
          "." + this.CssClasses_.ITEM + ":not([disabled])"
        )) &&
        0 < t.length &&
        this.container_.classList.contains(this.CssClasses_.IS_VISIBLE) &&
        ((e = Array.prototype.slice.call(t).indexOf(s.target)),
        s.keyCode === this.Keycodes_.UP_ARROW
          ? (s.preventDefault(), (0 < e ? t[e - 1] : t[t.length - 1]).focus())
          : s.keyCode === this.Keycodes_.DOWN_ARROW
          ? (s.preventDefault(), (t.length > e + 1 ? t[e + 1] : t[0]).focus())
          : s.keyCode === this.Keycodes_.SPACE ||
            s.keyCode === this.Keycodes_.ENTER
          ? (s.preventDefault(),
            (t = new MouseEvent("mousedown")),
            s.target.dispatchEvent(t),
            (t = new MouseEvent("mouseup")),
            s.target.dispatchEvent(t),
            s.target.click())
          : s.keyCode === this.Keycodes_.ESCAPE &&
            (s.preventDefault(), this.hide()));
    }),
    (d.prototype.handleItemClick_ = function (s) {
      s.target.hasAttribute("disabled")
        ? s.stopPropagation()
        : ((this.closing_ = !0),
          window.setTimeout(
            function (s) {
              this.hide(), (this.closing_ = !1);
            }.bind(this),
            this.Constant_.CLOSE_TIMEOUT
          ));
    }),
    (d.prototype.applyClip_ = function (s, e) {
      this.element_.classList.contains(this.CssClasses_.UNALIGNED)
        ? (this.element_.style.clip = "")
        : this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)
        ? (this.element_.style.clip = "rect(0 " + e + "px 0 " + e + "px)")
        : this.element_.classList.contains(this.CssClasses_.TOP_LEFT)
        ? (this.element_.style.clip = "rect(" + s + "px 0 " + s + "px 0)")
        : this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)
        ? (this.element_.style.clip =
            "rect(" + s + "px " + e + "px " + s + "px " + e + "px)")
        : (this.element_.style.clip = "");
    }),
    (d.prototype.removeAnimationEndListener_ = function (s) {
      s.target.classList.remove(d.prototype.CssClasses_.IS_ANIMATING);
    }),
    (d.prototype.addAnimationEndListener_ = function () {
      this.element_.addEventListener(
        "transitionend",
        this.removeAnimationEndListener_
      ),
        this.element_.addEventListener(
          "webkitTransitionEnd",
          this.removeAnimationEndListener_
        );
    }),
    (d.prototype.show = function (e) {
      if (this.element_ && this.container_ && this.outline_) {
        var s = this.element_.getBoundingClientRect().height,
          t = this.element_.getBoundingClientRect().width;
        (this.container_.style.width = t + "px"),
          (this.container_.style.height = s + "px"),
          (this.outline_.style.width = t + "px"),
          (this.outline_.style.height = s + "px");
        for (
          var i =
              this.Constant_.TRANSITION_DURATION_SECONDS *
              this.Constant_.TRANSITION_DURATION_FRACTION,
            n = this.element_.querySelectorAll("." + this.CssClasses_.ITEM),
            a = 0;
          a < n.length;
          a++
        ) {
          var l =
            this.element_.classList.contains(this.CssClasses_.TOP_LEFT) ||
            this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)
              ? ((s - n[a].offsetTop - n[a].offsetHeight) / s) * i + "s"
              : (n[a].offsetTop / s) * i + "s";
          n[a].style.transitionDelay = l;
        }
        this.applyClip_(s, t),
          window.requestAnimationFrame(
            function () {
              this.element_.classList.add(this.CssClasses_.IS_ANIMATING),
                (this.element_.style.clip =
                  "rect(0 " + t + "px " + s + "px 0)"),
                this.container_.classList.add(this.CssClasses_.IS_VISIBLE);
            }.bind(this)
          ),
          this.addAnimationEndListener_();
        var o = function (s) {
          s === e ||
            this.closing_ ||
            s.target.parentNode === this.element_ ||
            (document.removeEventListener("click", o), this.hide());
        }.bind(this);
        document.addEventListener("click", o);
      }
    }),
    (d.prototype.hide = function () {
      if (this.element_ && this.container_ && this.outline_) {
        for (
          var s = this.element_.querySelectorAll("." + this.CssClasses_.ITEM),
            e = 0;
          e < s.length;
          e++
        )
          s[e].style.removeProperty("transition-delay");
        var t = this.element_.getBoundingClientRect(),
          i = t.height,
          t = t.width;
        this.element_.classList.add(this.CssClasses_.IS_ANIMATING),
          this.applyClip_(i, t),
          this.container_.classList.remove(this.CssClasses_.IS_VISIBLE),
          this.addAnimationEndListener_();
      }
    }),
    (d.prototype.toggle = function (s) {
      this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)
        ? this.hide()
        : this.show(s);
    }),
    n.register({
      constructor: d,
      classAsString: "MaterialMenu",
      cssClass: "mdl-js-menu",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialProgress = _).prototype.Constant_ = {}),
    (_.prototype.CssClasses_ = {
      INDETERMINATE_CLASS: "mdl-progress__indeterminate",
    }),
    (_.prototype.setProgress = function (s) {
      this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS) ||
        (this.progressbar_.style.width = s + "%");
    }),
    (_.prototype.setBuffer = function (s) {
      (this.bufferbar_.style.width = s + "%"),
        (this.auxbar_.style.width = 100 - s + "%");
    }),
    (_.prototype.init = function () {
      var s;
      this.element_ &&
        (((s = document.createElement("div")).className =
          "progressbar bar bar1"),
        this.element_.appendChild(s),
        (this.progressbar_ = s),
        ((s = document.createElement("div")).className = "bufferbar bar bar2"),
        this.element_.appendChild(s),
        (this.bufferbar_ = s),
        ((s = document.createElement("div")).className = "auxbar bar bar3"),
        this.element_.appendChild(s),
        (this.auxbar_ = s),
        (this.progressbar_.style.width = "0%"),
        (this.bufferbar_.style.width = "100%"),
        (this.auxbar_.style.width = "0%"),
        this.element_.classList.add("is-upgraded"));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialProgress",
      cssClass: "mdl-js-progress",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialRadio = _).prototype.Constant_ = { TINY_TIMEOUT: 0.001 }),
    (_.prototype.CssClasses_ = {
      IS_FOCUSED: "is-focused",
      IS_DISABLED: "is-disabled",
      IS_CHECKED: "is-checked",
      IS_UPGRADED: "is-upgraded",
      JS_RADIO: "mdl-js-radio",
      RADIO_BTN: "mdl-radio__button",
      RADIO_OUTER_CIRCLE: "mdl-radio__outer-circle",
      RADIO_INNER_CIRCLE: "mdl-radio__inner-circle",
      RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      RIPPLE_CONTAINER: "mdl-radio__ripple-container",
      RIPPLE_CENTER: "mdl-ripple--center",
      RIPPLE: "mdl-ripple",
    }),
    (_.prototype.onChange_ = function (s) {
      for (
        var e = document.getElementsByClassName(this.CssClasses_.JS_RADIO),
          t = 0;
        t < e.length;
        t++
      )
        e[t]
          .querySelector("." + this.CssClasses_.RADIO_BTN)
          .getAttribute("name") === this.btnElement_.getAttribute("name") &&
          void 0 !== e[t].MaterialRadio &&
          e[t].MaterialRadio.updateClasses_();
    }),
    (_.prototype.onFocus_ = function (s) {
      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onBlur_ = function (s) {
      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onMouseup_ = function (s) {
      this.blur_();
    }),
    (_.prototype.updateClasses_ = function () {
      this.checkDisabled(), this.checkToggleState();
    }),
    (_.prototype.blur_ = function () {
      window.setTimeout(
        function () {
          this.btnElement_.blur();
        }.bind(this),
        this.Constant_.TINY_TIMEOUT
      );
    }),
    (_.prototype.checkDisabled = function () {
      this.btnElement_.disabled
        ? this.element_.classList.add(this.CssClasses_.IS_DISABLED)
        : this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
    }),
    (_.prototype.checkToggleState = function () {
      this.btnElement_.checked
        ? this.element_.classList.add(this.CssClasses_.IS_CHECKED)
        : this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
    }),
    (_.prototype.disable = function () {
      (this.btnElement_.disabled = !0), this.updateClasses_();
    }),
    (_.prototype.enable = function () {
      (this.btnElement_.disabled = !1), this.updateClasses_();
    }),
    (_.prototype.check = function () {
      (this.btnElement_.checked = !0), this.onChange_(null);
    }),
    (_.prototype.uncheck = function () {
      (this.btnElement_.checked = !1), this.onChange_(null);
    }),
    (_.prototype.init = function () {
      var s, e;
      this.element_ &&
        ((this.btnElement_ = this.element_.querySelector(
          "." + this.CssClasses_.RADIO_BTN
        )),
        (this.boundChangeHandler_ = this.onChange_.bind(this)),
        (this.boundFocusHandler_ = this.onChange_.bind(this)),
        (this.boundBlurHandler_ = this.onBlur_.bind(this)),
        (this.boundMouseUpHandler_ = this.onMouseup_.bind(this)),
        (s = document.createElement("span")).classList.add(
          this.CssClasses_.RADIO_OUTER_CIRCLE
        ),
        (e = document.createElement("span")).classList.add(
          this.CssClasses_.RADIO_INNER_CIRCLE
        ),
        this.element_.appendChild(s),
        this.element_.appendChild(e),
        this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT) &&
          (this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),
          (s = document.createElement("span")).classList.add(
            this.CssClasses_.RIPPLE_CONTAINER
          ),
          s.classList.add(this.CssClasses_.RIPPLE_EFFECT),
          s.classList.add(this.CssClasses_.RIPPLE_CENTER),
          s.addEventListener("mouseup", this.boundMouseUpHandler_),
          (e = document.createElement("span")).classList.add(
            this.CssClasses_.RIPPLE
          ),
          s.appendChild(e),
          this.element_.appendChild(s)),
        this.btnElement_.addEventListener("change", this.boundChangeHandler_),
        this.btnElement_.addEventListener("focus", this.boundFocusHandler_),
        this.btnElement_.addEventListener("blur", this.boundBlurHandler_),
        this.element_.addEventListener("mouseup", this.boundMouseUpHandler_),
        this.updateClasses_(),
        this.element_.classList.add(this.CssClasses_.IS_UPGRADED));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialRadio",
      cssClass: "mdl-js-radio",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s),
        (this.isIE_ = window.navigator.msPointerEnabled),
        this.init();
    }),
    ((window.MaterialSlider = _).prototype.Constant_ = {}),
    (_.prototype.CssClasses_ = {
      IE_CONTAINER: "mdl-slider__ie-container",
      SLIDER_CONTAINER: "mdl-slider__container",
      BACKGROUND_FLEX: "mdl-slider__background-flex",
      BACKGROUND_LOWER: "mdl-slider__background-lower",
      BACKGROUND_UPPER: "mdl-slider__background-upper",
      IS_LOWEST_VALUE: "is-lowest-value",
      IS_UPGRADED: "is-upgraded",
    }),
    (_.prototype.onInput_ = function (s) {
      this.updateValueStyles_();
    }),
    (_.prototype.onChange_ = function (s) {
      this.updateValueStyles_();
    }),
    (_.prototype.onMouseUp_ = function (s) {
      s.target.blur();
    }),
    (_.prototype.onContainerMouseDown_ = function (s) {
      s.target === this.element_.parentElement &&
        (s.preventDefault(),
        (s = new MouseEvent("mousedown", {
          target: s.target,
          buttons: s.buttons,
          clientX: s.clientX,
          clientY: this.element_.getBoundingClientRect().y,
        })),
        this.element_.dispatchEvent(s));
    }),
    (_.prototype.updateValueStyles_ = function () {
      var s =
        (this.element_.value - this.element_.min) /
        (this.element_.max - this.element_.min);
      0 == s
        ? this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE)
        : this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE),
        this.isIE_ ||
          ((this.backgroundLower_.style.flex = s),
          (this.backgroundLower_.style.webkitFlex = s),
          (this.backgroundUpper_.style.flex = 1 - s),
          (this.backgroundUpper_.style.webkitFlex = 1 - s));
    }),
    (_.prototype.disable = function () {
      this.element_.disabled = !0;
    }),
    (_.prototype.enable = function () {
      this.element_.disabled = !1;
    }),
    (_.prototype.change = function (s) {
      void 0 !== s && (this.element_.value = s), this.updateValueStyles_();
    }),
    (_.prototype.init = function () {
      var s, e;
      this.element_ &&
        (this.isIE_
          ? ((e = document.createElement("div")).classList.add(
              this.CssClasses_.IE_CONTAINER
            ),
            this.element_.parentElement.insertBefore(e, this.element_),
            this.element_.parentElement.removeChild(this.element_),
            e.appendChild(this.element_))
          : ((s = document.createElement("div")).classList.add(
              this.CssClasses_.SLIDER_CONTAINER
            ),
            this.element_.parentElement.insertBefore(s, this.element_),
            this.element_.parentElement.removeChild(this.element_),
            s.appendChild(this.element_),
            (e = document.createElement("div")).classList.add(
              this.CssClasses_.BACKGROUND_FLEX
            ),
            s.appendChild(e),
            (this.backgroundLower_ = document.createElement("div")),
            this.backgroundLower_.classList.add(
              this.CssClasses_.BACKGROUND_LOWER
            ),
            e.appendChild(this.backgroundLower_),
            (this.backgroundUpper_ = document.createElement("div")),
            this.backgroundUpper_.classList.add(
              this.CssClasses_.BACKGROUND_UPPER
            ),
            e.appendChild(this.backgroundUpper_)),
        (this.boundInputHandler = this.onInput_.bind(this)),
        (this.boundChangeHandler = this.onChange_.bind(this)),
        (this.boundMouseUpHandler = this.onMouseUp_.bind(this)),
        (this.boundContainerMouseDownHandler =
          this.onContainerMouseDown_.bind(this)),
        this.element_.addEventListener("input", this.boundInputHandler),
        this.element_.addEventListener("change", this.boundChangeHandler),
        this.element_.addEventListener("mouseup", this.boundMouseUpHandler),
        this.element_.parentElement.addEventListener(
          "mousedown",
          this.boundContainerMouseDownHandler
        ),
        this.updateValueStyles_(),
        this.element_.classList.add(this.CssClasses_.IS_UPGRADED));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialSlider",
      cssClass: "mdl-js-slider",
      widget: !0,
    }),
    (_ = function (s) {
      if (
        ((this.element_ = s),
        (this.textElement_ = this.element_.querySelector(
          "." + this.cssClasses_.MESSAGE
        )),
        (this.actionElement_ = this.element_.querySelector(
          "." + this.cssClasses_.ACTION
        )),
        !this.textElement_)
      )
        throw new Error("There must be a message element for a snackbar.");
      if (!this.actionElement_)
        throw new Error("There must be an action element for a snackbar.");
      (this.active = !1),
        (this.actionHandler_ = void 0),
        (this.message_ = void 0),
        (this.actionText_ = void 0),
        (this.queuedNotifications_ = []),
        this.setActionHidden_(!0);
    }),
    ((window.MaterialSnackbar = _).prototype.Constant_ = {
      ANIMATION_LENGTH: 250,
    }),
    (_.prototype.cssClasses_ = {
      SNACKBAR: "mdl-snackbar",
      MESSAGE: "mdl-snackbar__text",
      ACTION: "mdl-snackbar__action",
      ACTIVE: "mdl-snackbar--active",
    }),
    (_.prototype.displaySnackbar_ = function () {
      this.element_.setAttribute("aria-hidden", "true"),
        this.actionHandler_ &&
          ((this.actionElement_.textContent = this.actionText_),
          this.actionElement_.addEventListener("click", this.actionHandler_),
          this.setActionHidden_(!1)),
        (this.textElement_.textContent = this.message_),
        this.element_.classList.add(this.cssClasses_.ACTIVE),
        this.element_.setAttribute("aria-hidden", "false"),
        setTimeout(this.cleanup_.bind(this), this.timeout_);
    }),
    (_.prototype.showSnackbar = function (s) {
      if (void 0 === s)
        throw new Error(
          "Please provide a data object with at least a message to display."
        );
      if (void 0 === s.message)
        throw new Error("Please provide a message to be displayed.");
      if (s.actionHandler && !s.actionText)
        throw new Error("Please provide action text with the handler.");
      this.active
        ? this.queuedNotifications_.push(s)
        : ((this.active = !0),
          (this.message_ = s.message),
          s.timeout ? (this.timeout_ = s.timeout) : (this.timeout_ = 2750),
          s.actionHandler && (this.actionHandler_ = s.actionHandler),
          s.actionText && (this.actionText_ = s.actionText),
          this.displaySnackbar_());
    }),
    (_.prototype.checkQueue_ = function () {
      0 < this.queuedNotifications_.length &&
        this.showSnackbar(this.queuedNotifications_.shift());
    }),
    (_.prototype.cleanup_ = function () {
      this.element_.classList.remove(this.cssClasses_.ACTIVE),
        setTimeout(
          function () {
            this.element_.setAttribute("aria-hidden", "true"),
              (this.textElement_.textContent = ""),
              Boolean(this.actionElement_.getAttribute("aria-hidden")) ||
                (this.setActionHidden_(!0),
                (this.actionElement_.textContent = ""),
                this.actionElement_.removeEventListener(
                  "click",
                  this.actionHandler_
                )),
              (this.actionHandler_ = void 0),
              (this.message_ = void 0),
              (this.actionText_ = void 0),
              (this.active = !1),
              this.checkQueue_();
          }.bind(this),
          this.Constant_.ANIMATION_LENGTH
        );
    }),
    (_.prototype.setActionHidden_ = function (s) {
      s
        ? this.actionElement_.setAttribute("aria-hidden", "true")
        : this.actionElement_.removeAttribute("aria-hidden");
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialSnackbar",
      cssClass: "mdl-js-snackbar",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialSpinner = _).prototype.Constant_ = {
      MDL_SPINNER_LAYER_COUNT: 4,
    }),
    (_.prototype.CssClasses_ = {
      MDL_SPINNER_LAYER: "mdl-spinner__layer",
      MDL_SPINNER_CIRCLE_CLIPPER: "mdl-spinner__circle-clipper",
      MDL_SPINNER_CIRCLE: "mdl-spinner__circle",
      MDL_SPINNER_GAP_PATCH: "mdl-spinner__gap-patch",
      MDL_SPINNER_LEFT: "mdl-spinner__left",
      MDL_SPINNER_RIGHT: "mdl-spinner__right",
    }),
    (_.prototype.createLayer = function (s) {
      var e = document.createElement("div");
      e.classList.add(this.CssClasses_.MDL_SPINNER_LAYER),
        e.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + "-" + s);
      var t = document.createElement("div");
      t.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER),
        t.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);
      var i = document.createElement("div");
      i.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);
      s = document.createElement("div");
      s.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER),
        s.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);
      for (var n = [t, i, s], a = 0; a < n.length; a++) {
        var l = document.createElement("div");
        l.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE),
          n[a].appendChild(l);
      }
      e.appendChild(t),
        e.appendChild(i),
        e.appendChild(s),
        this.element_.appendChild(e);
    }),
    (_.prototype.stop = function () {
      this.element_.classList.remove("is-active");
    }),
    (_.prototype.start = function () {
      this.element_.classList.add("is-active");
    }),
    (_.prototype.init = function () {
      if (this.element_) {
        for (var s = 1; s <= this.Constant_.MDL_SPINNER_LAYER_COUNT; s++)
          this.createLayer(s);
        this.element_.classList.add("is-upgraded");
      }
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialSpinner",
      cssClass: "mdl-js-spinner",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialSwitch = _).prototype.Constant_ = { TINY_TIMEOUT: 0.001 }),
    (_.prototype.CssClasses_ = {
      INPUT: "mdl-switch__input",
      TRACK: "mdl-switch__track",
      THUMB: "mdl-switch__thumb",
      FOCUS_HELPER: "mdl-switch__focus-helper",
      RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      RIPPLE_CONTAINER: "mdl-switch__ripple-container",
      RIPPLE_CENTER: "mdl-ripple--center",
      RIPPLE: "mdl-ripple",
      IS_FOCUSED: "is-focused",
      IS_DISABLED: "is-disabled",
      IS_CHECKED: "is-checked",
    }),
    (_.prototype.onChange_ = function (s) {
      this.updateClasses_();
    }),
    (_.prototype.onFocus_ = function (s) {
      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onBlur_ = function (s) {
      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onMouseUp_ = function (s) {
      this.blur_();
    }),
    (_.prototype.updateClasses_ = function () {
      this.checkDisabled(), this.checkToggleState();
    }),
    (_.prototype.blur_ = function () {
      window.setTimeout(
        function () {
          this.inputElement_.blur();
        }.bind(this),
        this.Constant_.TINY_TIMEOUT
      );
    }),
    (_.prototype.checkDisabled = function () {
      this.inputElement_.disabled
        ? this.element_.classList.add(this.CssClasses_.IS_DISABLED)
        : this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
    }),
    (_.prototype.checkToggleState = function () {
      this.inputElement_.checked
        ? this.element_.classList.add(this.CssClasses_.IS_CHECKED)
        : this.element_.classList.remove(this.CssClasses_.IS_CHECKED);
    }),
    (_.prototype.disable = function () {
      (this.inputElement_.disabled = !0), this.updateClasses_();
    }),
    (_.prototype.enable = function () {
      (this.inputElement_.disabled = !1), this.updateClasses_();
    }),
    (_.prototype.on = function () {
      (this.inputElement_.checked = !0), this.updateClasses_();
    }),
    (_.prototype.off = function () {
      (this.inputElement_.checked = !1), this.updateClasses_();
    }),
    (_.prototype.init = function () {
      var s, e, t;
      this.element_ &&
        ((this.inputElement_ = this.element_.querySelector(
          "." + this.CssClasses_.INPUT
        )),
        (s = document.createElement("div")).classList.add(
          this.CssClasses_.TRACK
        ),
        (t = document.createElement("div")).classList.add(
          this.CssClasses_.THUMB
        ),
        (e = document.createElement("span")).classList.add(
          this.CssClasses_.FOCUS_HELPER
        ),
        t.appendChild(e),
        this.element_.appendChild(s),
        this.element_.appendChild(t),
        (this.boundMouseUpHandler = this.onMouseUp_.bind(this)),
        this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT) &&
          (this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),
          (this.rippleContainerElement_ = document.createElement("span")),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_CONTAINER
          ),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_EFFECT
          ),
          this.rippleContainerElement_.classList.add(
            this.CssClasses_.RIPPLE_CENTER
          ),
          this.rippleContainerElement_.addEventListener(
            "mouseup",
            this.boundMouseUpHandler
          ),
          (t = document.createElement("span")).classList.add(
            this.CssClasses_.RIPPLE
          ),
          this.rippleContainerElement_.appendChild(t),
          this.element_.appendChild(this.rippleContainerElement_)),
        (this.boundChangeHandler = this.onChange_.bind(this)),
        (this.boundFocusHandler = this.onFocus_.bind(this)),
        (this.boundBlurHandler = this.onBlur_.bind(this)),
        this.inputElement_.addEventListener("change", this.boundChangeHandler),
        this.inputElement_.addEventListener("focus", this.boundFocusHandler),
        this.inputElement_.addEventListener("blur", this.boundBlurHandler),
        this.element_.addEventListener("mouseup", this.boundMouseUpHandler),
        this.updateClasses_(),
        this.element_.classList.add("is-upgraded"));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialSwitch",
      cssClass: "mdl-js-switch",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialTabs = _).prototype.Constant_ = {}),
    (_.prototype.CssClasses_ = {
      TAB_CLASS: "mdl-tabs__tab",
      PANEL_CLASS: "mdl-tabs__panel",
      ACTIVE_CLASS: "is-active",
      UPGRADED_CLASS: "is-upgraded",
      MDL_JS_RIPPLE_EFFECT: "mdl-js-ripple-effect",
      MDL_RIPPLE_CONTAINER: "mdl-tabs__ripple-container",
      MDL_RIPPLE: "mdl-ripple",
      MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
    }),
    (_.prototype.initTabs_ = function () {
      this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT) &&
        this.element_.classList.add(
          this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS
        ),
        (this.tabs_ = this.element_.querySelectorAll(
          "." + this.CssClasses_.TAB_CLASS
        )),
        (this.panels_ = this.element_.querySelectorAll(
          "." + this.CssClasses_.PANEL_CLASS
        ));
      for (var s = 0; s < this.tabs_.length; s++) e(this.tabs_[s], this);
      this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);
    }),
    (_.prototype.resetTabState_ = function () {
      for (var s = 0; s < this.tabs_.length; s++)
        this.tabs_[s].classList.remove(this.CssClasses_.ACTIVE_CLASS);
    }),
    (_.prototype.resetPanelState_ = function () {
      for (var s = 0; s < this.panels_.length; s++)
        this.panels_[s].classList.remove(this.CssClasses_.ACTIVE_CLASS);
    }),
    (_.prototype.init = function () {
      this.element_ && this.initTabs_();
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialTabs",
      cssClass: "mdl-js-tabs",
    }),
    (_ = function (s) {
      (this.element_ = s),
        (this.maxRows = this.Constant_.NO_MAX_ROWS),
        this.init();
    }),
    ((window.MaterialTextfield = _).prototype.Constant_ = {
      NO_MAX_ROWS: -1,
      MAX_ROWS_ATTRIBUTE: "maxrows",
    }),
    (_.prototype.CssClasses_ = {
      LABEL: "mdl-textfield__label",
      INPUT: "mdl-textfield__input",
      IS_DIRTY: "is-dirty",
      IS_FOCUSED: "is-focused",
      IS_DISABLED: "is-disabled",
      IS_INVALID: "is-invalid",
      IS_UPGRADED: "is-upgraded",
      HAS_PLACEHOLDER: "has-placeholder",
    }),
    (_.prototype.onKeyDown_ = function (s) {
      var e = s.target.value.split("\n").length;
      13 === s.keyCode && e >= this.maxRows && s.preventDefault();
    }),
    (_.prototype.onFocus_ = function (s) {
      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onBlur_ = function (s) {
      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.onReset_ = function (s) {
      this.updateClasses_();
    }),
    (_.prototype.updateClasses_ = function () {
      this.checkDisabled(),
        this.checkValidity(),
        this.checkDirty(),
        this.checkFocus();
    }),
    (_.prototype.checkDisabled = function () {
      this.input_.disabled
        ? this.element_.classList.add(this.CssClasses_.IS_DISABLED)
        : this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
    }),
    (_.prototype.checkFocus = function () {
      Boolean(this.element_.querySelector(":focus"))
        ? this.element_.classList.add(this.CssClasses_.IS_FOCUSED)
        : this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    }),
    (_.prototype.checkValidity = function () {
      this.input_.validity &&
        (this.input_.validity.valid
          ? this.element_.classList.remove(this.CssClasses_.IS_INVALID)
          : this.element_.classList.add(this.CssClasses_.IS_INVALID));
    }),
    (_.prototype.checkDirty = function () {
      this.input_.value && 0 < this.input_.value.length
        ? this.element_.classList.add(this.CssClasses_.IS_DIRTY)
        : this.element_.classList.remove(this.CssClasses_.IS_DIRTY);
    }),
    (_.prototype.disable = function () {
      (this.input_.disabled = !0), this.updateClasses_();
    }),
    (_.prototype.enable = function () {
      (this.input_.disabled = !1), this.updateClasses_();
    }),
    (_.prototype.change = function (s) {
      (this.input_.value = s || ""), this.updateClasses_();
    }),
    (_.prototype.init = function () {
      var s;
      this.element_ &&
        ((this.label_ = this.element_.querySelector(
          "." + this.CssClasses_.LABEL
        )),
        (this.input_ = this.element_.querySelector(
          "." + this.CssClasses_.INPUT
        )),
        this.input_) &&
        (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE) &&
          ((this.maxRows = parseInt(
            this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE),
            10
          )),
          isNaN(this.maxRows) && (this.maxRows = this.Constant_.NO_MAX_ROWS)),
        this.input_.hasAttribute("placeholder") &&
          this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER),
        (this.boundUpdateClassesHandler = this.updateClasses_.bind(this)),
        (this.boundFocusHandler = this.onFocus_.bind(this)),
        (this.boundBlurHandler = this.onBlur_.bind(this)),
        (this.boundResetHandler = this.onReset_.bind(this)),
        this.input_.addEventListener("input", this.boundUpdateClassesHandler),
        this.input_.addEventListener("focus", this.boundFocusHandler),
        this.input_.addEventListener("blur", this.boundBlurHandler),
        this.input_.addEventListener("reset", this.boundResetHandler),
        this.maxRows !== this.Constant_.NO_MAX_ROWS &&
          ((this.boundKeyDownHandler = this.onKeyDown_.bind(this)),
          this.input_.addEventListener("keydown", this.boundKeyDownHandler)),
        (s = this.element_.classList.contains(this.CssClasses_.IS_INVALID)),
        this.updateClasses_(),
        this.element_.classList.add(this.CssClasses_.IS_UPGRADED),
        s && this.element_.classList.add(this.CssClasses_.IS_INVALID),
        this.input_.hasAttribute("autofocus") &&
          (this.element_.focus(), this.checkFocus()));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialTextfield",
      cssClass: "mdl-js-textfield",
      widget: !0,
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialTooltip = _).prototype.Constant_ = {}),
    (_.prototype.CssClasses_ = {
      IS_ACTIVE: "is-active",
      BOTTOM: "mdl-tooltip--bottom",
      LEFT: "mdl-tooltip--left",
      RIGHT: "mdl-tooltip--right",
      TOP: "mdl-tooltip--top",
    }),
    (_.prototype.handleMouseEnter_ = function (s) {
      var e = s.target.getBoundingClientRect(),
        t = e.left + e.width / 2,
        i = e.top + e.height / 2,
        n = (this.element_.offsetWidth / 2) * -1,
        s = (this.element_.offsetHeight / 2) * -1;
      this.element_.classList.contains(this.CssClasses_.LEFT) ||
      this.element_.classList.contains(this.CssClasses_.RIGHT)
        ? ((t = e.width / 2),
          i + s < 0
            ? ((this.element_.style.top = "0"),
              (this.element_.style.marginTop = "0"))
            : ((this.element_.style.top = i + "px"),
              (this.element_.style.marginTop = s + "px")))
        : t + n < 0
        ? ((this.element_.style.left = "0"),
          (this.element_.style.marginLeft = "0"))
        : ((this.element_.style.left = t + "px"),
          (this.element_.style.marginLeft = n + "px")),
        this.element_.classList.contains(this.CssClasses_.TOP)
          ? (this.element_.style.top =
              e.top - this.element_.offsetHeight - 10 + "px")
          : this.element_.classList.contains(this.CssClasses_.RIGHT)
          ? (this.element_.style.left = e.left + e.width + 10 + "px")
          : this.element_.classList.contains(this.CssClasses_.LEFT)
          ? (this.element_.style.left =
              e.left - this.element_.offsetWidth - 10 + "px")
          : (this.element_.style.top = e.top + e.height + 10 + "px"),
        this.element_.classList.add(this.CssClasses_.IS_ACTIVE);
    }),
    (_.prototype.hideTooltip_ = function () {
      this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);
    }),
    (_.prototype.init = function () {
      var s;
      this.element_ &&
        ((s =
          this.element_.getAttribute("for") ||
          this.element_.getAttribute("data-mdl-for")) &&
          (this.forElement_ = document.getElementById(s)),
        this.forElement_ &&
          (this.forElement_.hasAttribute("tabindex") ||
            this.forElement_.setAttribute("tabindex", "0"),
          (this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this)),
          (this.boundMouseLeaveAndScrollHandler = this.hideTooltip_.bind(this)),
          this.forElement_.addEventListener(
            "mouseenter",
            this.boundMouseEnterHandler,
            !1
          ),
          this.forElement_.addEventListener(
            "touchend",
            this.boundMouseEnterHandler,
            !1
          ),
          this.forElement_.addEventListener(
            "mouseleave",
            this.boundMouseLeaveAndScrollHandler,
            !1
          ),
          window.addEventListener(
            "scroll",
            this.boundMouseLeaveAndScrollHandler,
            !0
          ),
          window.addEventListener(
            "touchstart",
            this.boundMouseLeaveAndScrollHandler
          )));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialTooltip",
      cssClass: "mdl-tooltip",
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialLayout = _).prototype.Constant_ = {
      MAX_WIDTH: "(max-width: 1024px)",
      TAB_SCROLL_PIXELS: 100,
      RESIZE_TIMEOUT: 100,
      MENU_ICON: "&#xE5D2;",
      CHEVRON_LEFT: "chevron_left",
      CHEVRON_RIGHT: "chevron_right",
    }),
    (_.prototype.Keycodes_ = { ENTER: 13, ESCAPE: 27, SPACE: 32 }),
    (_.prototype.Mode_ = { STANDARD: 0, SEAMED: 1, WATERFALL: 2, SCROLL: 3 }),
    (_.prototype.CssClasses_ = {
      CONTAINER: "mdl-layout__container",
      HEADER: "mdl-layout__header",
      DRAWER: "mdl-layout__drawer",
      CONTENT: "mdl-layout__content",
      DRAWER_BTN: "mdl-layout__drawer-button",
      ICON: "material-icons",
      JS_RIPPLE_EFFECT: "mdl-js-ripple-effect",
      RIPPLE_CONTAINER: "mdl-layout__tab-ripple-container",
      RIPPLE: "mdl-ripple",
      RIPPLE_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      HEADER_SEAMED: "mdl-layout__header--seamed",
      HEADER_WATERFALL: "mdl-layout__header--waterfall",
      HEADER_SCROLL: "mdl-layout__header--scroll",
      FIXED_HEADER: "mdl-layout--fixed-header",
      OBFUSCATOR: "mdl-layout__obfuscator",
      TAB_BAR: "mdl-layout__tab-bar",
      TAB_CONTAINER: "mdl-layout__tab-bar-container",
      TAB: "mdl-layout__tab",
      TAB_BAR_BUTTON: "mdl-layout__tab-bar-button",
      TAB_BAR_LEFT_BUTTON: "mdl-layout__tab-bar-left-button",
      TAB_BAR_RIGHT_BUTTON: "mdl-layout__tab-bar-right-button",
      TAB_MANUAL_SWITCH: "mdl-layout__tab-manual-switch",
      PANEL: "mdl-layout__tab-panel",
      HAS_DRAWER: "has-drawer",
      HAS_TABS: "has-tabs",
      HAS_SCROLLING_HEADER: "has-scrolling-header",
      CASTING_SHADOW: "is-casting-shadow",
      IS_COMPACT: "is-compact",
      IS_SMALL_SCREEN: "is-small-screen",
      IS_DRAWER_OPEN: "is-visible",
      IS_ACTIVE: "is-active",
      IS_UPGRADED: "is-upgraded",
      IS_ANIMATING: "is-animating",
      ON_LARGE_SCREEN: "mdl-layout--large-screen-only",
      ON_SMALL_SCREEN: "mdl-layout--small-screen-only",
    }),
    (_.prototype.contentScrollHandler_ = function () {
      var s;
      this.header_.classList.contains(this.CssClasses_.IS_ANIMATING) ||
        ((s =
          !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) ||
          this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)),
        0 < this.content_.scrollTop &&
        !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)
          ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW),
            this.header_.classList.add(this.CssClasses_.IS_COMPACT),
            s && this.header_.classList.add(this.CssClasses_.IS_ANIMATING))
          : this.content_.scrollTop <= 0 &&
            this.header_.classList.contains(this.CssClasses_.IS_COMPACT) &&
            (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW),
            this.header_.classList.remove(this.CssClasses_.IS_COMPACT),
            s && this.header_.classList.add(this.CssClasses_.IS_ANIMATING)));
    }),
    (_.prototype.keyboardEventHandler_ = function (s) {
      s.keyCode === this.Keycodes_.ESCAPE &&
        this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN) &&
        this.toggleDrawer();
    }),
    (_.prototype.screenSizeHandler_ = function () {
      this.screenSizeMediaQuery_.matches
        ? this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN)
        : (this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN),
          this.drawer_ &&
            (this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN),
            this.obfuscator_.classList.remove(
              this.CssClasses_.IS_DRAWER_OPEN
            )));
    }),
    (_.prototype.drawerToggleHandler_ = function (s) {
      if (s && "keydown" === s.type) {
        if (
          s.keyCode !== this.Keycodes_.SPACE &&
          s.keyCode !== this.Keycodes_.ENTER
        )
          return;
        s.preventDefault();
      }
      this.toggleDrawer();
    }),
    (_.prototype.headerTransitionEndHandler_ = function () {
      this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);
    }),
    (_.prototype.headerClickHandler_ = function () {
      this.header_.classList.contains(this.CssClasses_.IS_COMPACT) &&
        (this.header_.classList.remove(this.CssClasses_.IS_COMPACT),
        this.header_.classList.add(this.CssClasses_.IS_ANIMATING));
    }),
    (_.prototype.resetTabState_ = function (s) {
      for (var e = 0; e < s.length; e++)
        s[e].classList.remove(this.CssClasses_.IS_ACTIVE);
    }),
    (_.prototype.resetPanelState_ = function (s) {
      for (var e = 0; e < s.length; e++)
        s[e].classList.remove(this.CssClasses_.IS_ACTIVE);
    }),
    (_.prototype.toggleDrawer = function () {
      var s = this.element_.querySelector("." + this.CssClasses_.DRAWER_BTN);
      this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN),
        this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN),
        this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)
          ? (this.drawer_.setAttribute("aria-hidden", "false"),
            s.setAttribute("aria-expanded", "true"))
          : (this.drawer_.setAttribute("aria-hidden", "true"),
            s.setAttribute("aria-expanded", "false"));
    }),
    (_.prototype.init = function () {
      if (this.element_) {
        var s = document.createElement("div");
        s.classList.add(this.CssClasses_.CONTAINER);
        var e = this.element_.querySelector(":focus");
        this.element_.parentElement.insertBefore(s, this.element_),
          this.element_.parentElement.removeChild(this.element_),
          s.appendChild(this.element_),
          e && e.focus();
        for (
          var t = this.element_.childNodes, i = t.length, n = 0;
          n < i;
          n++
        ) {
          var a = t[n];
          a.classList &&
            a.classList.contains(this.CssClasses_.HEADER) &&
            (this.header_ = a),
            a.classList &&
              a.classList.contains(this.CssClasses_.DRAWER) &&
              (this.drawer_ = a),
            a.classList &&
              a.classList.contains(this.CssClasses_.CONTENT) &&
              (this.content_ = a);
        }
        window.addEventListener(
          "pageshow",
          function (s) {
            s.persisted &&
              ((this.element_.style.overflowY = "hidden"),
              requestAnimationFrame(
                function () {
                  this.element_.style.overflowY = "";
                }.bind(this)
              ));
          }.bind(this),
          !1
        ),
          this.header_ &&
            (this.tabBar_ = this.header_.querySelector(
              "." + this.CssClasses_.TAB_BAR
            ));
        e = this.Mode_.STANDARD;
        if (
          (this.header_ &&
            (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)
              ? (e = this.Mode_.SEAMED)
              : this.header_.classList.contains(
                  this.CssClasses_.HEADER_WATERFALL
                )
              ? ((e = this.Mode_.WATERFALL),
                this.header_.addEventListener(
                  "transitionend",
                  this.headerTransitionEndHandler_.bind(this)
                ),
                this.header_.addEventListener(
                  "click",
                  this.headerClickHandler_.bind(this)
                ))
              : this.header_.classList.contains(
                  this.CssClasses_.HEADER_SCROLL
                ) &&
                ((e = this.Mode_.SCROLL),
                s.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER)),
            e === this.Mode_.STANDARD
              ? (this.header_.classList.add(this.CssClasses_.CASTING_SHADOW),
                this.tabBar_ &&
                  this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW))
              : e === this.Mode_.SEAMED || e === this.Mode_.SCROLL
              ? (this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW),
                this.tabBar_ &&
                  this.tabBar_.classList.remove(
                    this.CssClasses_.CASTING_SHADOW
                  ))
              : e === this.Mode_.WATERFALL &&
                (this.content_.addEventListener(
                  "scroll",
                  this.contentScrollHandler_.bind(this)
                ),
                this.contentScrollHandler_())),
          this.drawer_ &&
            ((l = this.element_.querySelector(
              "." + this.CssClasses_.DRAWER_BTN
            )) ||
              ((l = document.createElement("div")).setAttribute(
                "aria-expanded",
                "false"
              ),
              l.setAttribute("role", "button"),
              l.setAttribute("tabindex", "0"),
              l.classList.add(this.CssClasses_.DRAWER_BTN),
              (r = document.createElement("i")).classList.add(
                this.CssClasses_.ICON
              ),
              (r.innerHTML = this.Constant_.MENU_ICON),
              l.appendChild(r)),
            this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)
              ? l.classList.add(this.CssClasses_.ON_LARGE_SCREEN)
              : this.drawer_.classList.contains(
                  this.CssClasses_.ON_SMALL_SCREEN
                ) && l.classList.add(this.CssClasses_.ON_SMALL_SCREEN),
            l.addEventListener("click", this.drawerToggleHandler_.bind(this)),
            l.addEventListener("keydown", this.drawerToggleHandler_.bind(this)),
            this.element_.classList.add(this.CssClasses_.HAS_DRAWER),
            this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)
              ? this.header_.insertBefore(l, this.header_.firstChild)
              : this.element_.insertBefore(l, this.content_),
            (r = document.createElement("div")).classList.add(
              this.CssClasses_.OBFUSCATOR
            ),
            this.element_.appendChild(r),
            r.addEventListener("click", this.drawerToggleHandler_.bind(this)),
            (this.obfuscator_ = r),
            this.drawer_.addEventListener(
              "keydown",
              this.keyboardEventHandler_.bind(this)
            ),
            this.drawer_.setAttribute("aria-hidden", "true")),
          (this.screenSizeMediaQuery_ = window.matchMedia(
            this.Constant_.MAX_WIDTH
          )),
          this.screenSizeMediaQuery_.addListener(
            this.screenSizeHandler_.bind(this)
          ),
          this.screenSizeHandler_(),
          this.header_ && this.tabBar_)
        ) {
          this.element_.classList.add(this.CssClasses_.HAS_TABS);
          var l = document.createElement("div");
          l.classList.add(this.CssClasses_.TAB_CONTAINER),
            this.header_.insertBefore(l, this.tabBar_),
            this.header_.removeChild(this.tabBar_);
          var o = document.createElement("div");
          o.classList.add(this.CssClasses_.TAB_BAR_BUTTON),
            o.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);
          var r = document.createElement("i");
          r.classList.add(this.CssClasses_.ICON),
            (r.textContent = this.Constant_.CHEVRON_LEFT),
            o.appendChild(r),
            o.addEventListener(
              "click",
              function () {
                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;
              }.bind(this)
            );
          var _ = document.createElement("div");
          _.classList.add(this.CssClasses_.TAB_BAR_BUTTON),
            _.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);
          r = document.createElement("i");
          r.classList.add(this.CssClasses_.ICON),
            (r.textContent = this.Constant_.CHEVRON_RIGHT),
            _.appendChild(r),
            _.addEventListener(
              "click",
              function () {
                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;
              }.bind(this)
            ),
            l.appendChild(o),
            l.appendChild(this.tabBar_),
            l.appendChild(_);
          var d = function () {
            0 < this.tabBar_.scrollLeft
              ? o.classList.add(this.CssClasses_.IS_ACTIVE)
              : o.classList.remove(this.CssClasses_.IS_ACTIVE),
              this.tabBar_.scrollLeft <
              this.tabBar_.scrollWidth - this.tabBar_.offsetWidth
                ? _.classList.add(this.CssClasses_.IS_ACTIVE)
                : _.classList.remove(this.CssClasses_.IS_ACTIVE);
          }.bind(this);
          this.tabBar_.addEventListener("scroll", d), d();
          l = function () {
            this.resizeTimeoutId_ && clearTimeout(this.resizeTimeoutId_),
              (this.resizeTimeoutId_ = setTimeout(
                function () {
                  d(), (this.resizeTimeoutId_ = null);
                }.bind(this),
                this.Constant_.RESIZE_TIMEOUT
              ));
          }.bind(this);
          window.addEventListener("resize", l),
            this.tabBar_.classList.contains(
              this.CssClasses_.JS_RIPPLE_EFFECT
            ) &&
              this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);
          for (
            var h = this.tabBar_.querySelectorAll("." + this.CssClasses_.TAB),
              c = this.content_.querySelectorAll("." + this.CssClasses_.PANEL),
              C = 0;
            C < h.length;
            C++
          )
            p(h[C], h, c, this);
        }
        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
      }
    }),
    (window.MaterialLayoutTab = p),
    n.register({
      constructor: _,
      classAsString: "MaterialLayout",
      cssClass: "mdl-js-layout",
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialDataTable = _).prototype.Constant_ = {}),
    (_.prototype.CssClasses_ = {
      DATA_TABLE: "mdl-data-table",
      SELECTABLE: "mdl-data-table--selectable",
      SELECT_ELEMENT: "mdl-data-table__select",
      IS_SELECTED: "is-selected",
      IS_UPGRADED: "is-upgraded",
    }),
    (_.prototype.selectRow_ = function (e, s, t) {
      return s
        ? function () {
            e.checked
              ? s.classList.add(this.CssClasses_.IS_SELECTED)
              : s.classList.remove(this.CssClasses_.IS_SELECTED);
          }.bind(this)
        : t
        ? function () {
            var s;
            if (e.checked)
              for (s = 0; s < t.length; s++)
                t[s]
                  .querySelector("td")
                  .querySelector(".mdl-checkbox")
                  .MaterialCheckbox.check(),
                  t[s].classList.add(this.CssClasses_.IS_SELECTED);
            else
              for (s = 0; s < t.length; s++)
                t[s]
                  .querySelector("td")
                  .querySelector(".mdl-checkbox")
                  .MaterialCheckbox.uncheck(),
                  t[s].classList.remove(this.CssClasses_.IS_SELECTED);
          }.bind(this)
        : void 0;
    }),
    (_.prototype.createCheckbox_ = function (s, e) {
      var t = document.createElement("label"),
        i = [
          "mdl-checkbox",
          "mdl-js-checkbox",
          "mdl-js-ripple-effect",
          this.CssClasses_.SELECT_ELEMENT,
        ];
      t.className = i.join(" ");
      i = document.createElement("input");
      return (
        (i.type = "checkbox"),
        i.classList.add("mdl-checkbox__input"),
        s
          ? ((i.checked = s.classList.contains(this.CssClasses_.IS_SELECTED)),
            i.addEventListener("change", this.selectRow_(i, s)))
          : e && i.addEventListener("change", this.selectRow_(i, null, e)),
        t.appendChild(i),
        n.upgradeElement(t, "MaterialCheckbox"),
        t
      );
    }),
    (_.prototype.init = function () {
      if (this.element_) {
        var s = this.element_.querySelector("th"),
          e = Array.prototype.slice.call(
            this.element_.querySelectorAll("tbody tr")
          ),
          t = Array.prototype.slice.call(
            this.element_.querySelectorAll("tfoot tr")
          ),
          i = e.concat(t);
        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {
          (e = document.createElement("th")),
            (t = this.createCheckbox_(null, i));
          e.appendChild(t), s.parentElement.insertBefore(e, s);
          for (var n = 0; n < i.length; n++) {
            var a,
              l,
              o = i[n].querySelector("td");
            o &&
              ((a = document.createElement("td")),
              "TBODY" === i[n].parentNode.nodeName.toUpperCase() &&
                ((l = this.createCheckbox_(i[n])), a.appendChild(l)),
              i[n].insertBefore(a, o));
          }
          this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
        }
      }
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialDataTable",
      cssClass: "mdl-js-data-table",
    }),
    (_ = function (s) {
      (this.element_ = s), this.init();
    }),
    ((window.MaterialRipple = _).prototype.Constant_ = {
      INITIAL_SCALE: "scale(0.0001, 0.0001)",
      INITIAL_SIZE: "1px",
      INITIAL_OPACITY: "0.4",
      FINAL_OPACITY: "0",
      FINAL_SCALE: "",
    }),
    (_.prototype.CssClasses_ = {
      RIPPLE_CENTER: "mdl-ripple--center",
      RIPPLE_EFFECT_IGNORE_EVENTS: "mdl-js-ripple-effect--ignore-events",
      RIPPLE: "mdl-ripple",
      IS_ANIMATING: "is-animating",
      IS_VISIBLE: "is-visible",
    }),
    (_.prototype.downHandler_ = function (s) {
      var e, t, i;
      this.rippleElement_.style.width ||
        this.rippleElement_.style.height ||
        ((e = this.element_.getBoundingClientRect()),
        (this.boundHeight = e.height),
        (this.boundWidth = e.width),
        (this.rippleSize_ =
          2 * Math.sqrt(e.width * e.width + e.height * e.height) + 2),
        (this.rippleElement_.style.width = this.rippleSize_ + "px"),
        (this.rippleElement_.style.height = this.rippleSize_ + "px")),
        this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE),
        "mousedown" === s.type && this.ignoringMouseDown_
          ? (this.ignoringMouseDown_ = !1)
          : ("touchstart" === s.type && (this.ignoringMouseDown_ = !0),
            0 < this.getFrameCount() ||
              (this.setFrameCount(1),
              (i = s.currentTarget.getBoundingClientRect()),
              (i =
                0 === s.clientX && 0 === s.clientY
                  ? ((t = Math.round(i.width / 2)), Math.round(i.height / 2))
                  : ((e = (void 0 !== s.clientX ? s : s.touches[0]).clientX),
                    (s = (void 0 !== s.clientY ? s : s.touches[0]).clientY),
                    (t = Math.round(e - i.left)),
                    Math.round(s - i.top))),
              this.setRippleXY(t, i),
              this.setRippleStyles(!0),
              window.requestAnimationFrame(this.animFrameHandler.bind(this))));
    }),
    (_.prototype.upHandler_ = function (s) {
      s &&
        2 !== s.detail &&
        window.setTimeout(
          function () {
            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);
          }.bind(this),
          0
        );
    }),
    (_.prototype.init = function () {
      var i;
      this.element_ &&
        ((i = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER)),
        this.element_.classList.contains(
          this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS
        ) ||
          ((this.rippleElement_ = this.element_.querySelector(
            "." + this.CssClasses_.RIPPLE
          )),
          (this.frameCount_ = 0),
          (this.rippleSize_ = 0),
          (this.x_ = 0),
          (this.y_ = 0),
          (this.ignoringMouseDown_ = !1),
          (this.boundDownHandler = this.downHandler_.bind(this)),
          this.element_.addEventListener("mousedown", this.boundDownHandler),
          this.element_.addEventListener("touchstart", this.boundDownHandler),
          (this.boundUpHandler = this.upHandler_.bind(this)),
          this.element_.addEventListener("mouseup", this.boundUpHandler),
          this.element_.addEventListener("mouseleave", this.boundUpHandler),
          this.element_.addEventListener("touchend", this.boundUpHandler),
          this.element_.addEventListener("blur", this.boundUpHandler),
          (this.getFrameCount = function () {
            return this.frameCount_;
          }),
          (this.setFrameCount = function (s) {
            this.frameCount_ = s;
          }),
          (this.getRippleElement = function () {
            return this.rippleElement_;
          }),
          (this.setRippleXY = function (s, e) {
            (this.x_ = s), (this.y_ = e);
          }),
          (this.setRippleStyles = function (s) {
            var e, t;
            null !== this.rippleElement_ &&
              ((t = "translate(" + this.x_ + "px, " + this.y_ + "px)"),
              s
                ? ((e = this.Constant_.INITIAL_SCALE),
                  this.Constant_.INITIAL_SIZE)
                : ((e = this.Constant_.FINAL_SCALE),
                  this.rippleSize_,
                  i &&
                    (t =
                      "translate(" +
                      this.boundWidth / 2 +
                      "px, " +
                      this.boundHeight / 2 +
                      "px)")),
              (e = "translate(-50%, -50%) " + t + e),
              (this.rippleElement_.style.webkitTransform = e),
              (this.rippleElement_.style.msTransform = e),
              (this.rippleElement_.style.transform = e),
              s
                ? this.rippleElement_.classList.remove(
                    this.CssClasses_.IS_ANIMATING
                  )
                : this.rippleElement_.classList.add(
                    this.CssClasses_.IS_ANIMATING
                  ));
          }),
          (this.animFrameHandler = function () {
            0 < this.frameCount_--
              ? window.requestAnimationFrame(this.animFrameHandler.bind(this))
              : this.setRippleStyles(!1);
          })));
    }),
    n.register({
      constructor: _,
      classAsString: "MaterialRipple",
      cssClass: "mdl-js-ripple-effect",
      widget: !1,
    });
})();
